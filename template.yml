AWSTemplateFormatVersion: 2010-09-09

Transform:
- AWS::Serverless-2016-10-31

Description: "Web Service CloudFormation Application Infrastructure Template"

# =============================================================================
# META DATA
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cloudformation-interface.html
# 

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - 
        Label:
          default: "Application Resource Naming"
        Parameters:
          - Prefix
          - ProjectId
          - StageId
          - S3BucketNameOrgPrefix
      -
        Label:
          default: "Deployment Environment Identification"
        Parameters:
          - DeployEnvironment
      -
        Label:
          default: "External Resources and Alarm Notifications"
        Parameters:
          - AppParameterStorePath
          - AlarmNotificationEmail
      -
        Label:
          default: "Lambda Function Settings"
        Parameters:
          - FunctionTimeOutInSeconds
          - FunctionMaxMemoryInMB
          - FunctionGradualDeploymentType
          - DeployRole
      -
        Label:
          default: "Application Parameters"
        Parameters:
          - ApiPathBase
          - UserAgent
          - LogRetentionInDaysForPROD
          - LogRetentionInDaysForDEVTEST
      -
        Label:
          default: "Cache-Data Parameters"
        Parameters:
          - CacheData_DbMaxCacheSizeInKB
          - CacheData_CryptIdHashAlgorithm
          - CacheData_CryptSecureDataAlg
          - CacheData_ErrorExpirationInSeconds
          - CacheData_PurgeExpiredCacheEntriesInHours
          - CacheData_PurgeAgeOfCachedBucketObjInDays

# =============================================================================
# PARAMETERS
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
#

Parameters:

  # ---------------------------------------------------------------------------
  # Application Resource Naming

  Prefix:
    Type: String
    Description: "Prefix to assign to resources. This can be thought of as a Name Space and will be pre-pended to all resources. Use it to identify ownership/access for teams, departments, etc. Must have a corresponding CloudFormation Service Role. Ex: 'ws-hello-world-test' the Prefix would be 'ws', ProjectId would be 'hello-world', and the StageId would be 'test'."
    Default: "atlantis" 
    AllowedPattern: "^[a-z][a-z0-9-]*[a-z0-9]$"
    MinLength: 2
    MaxLength: 8
    ConstraintDescription: "2 to 8 characters. Alphanumeric (lower case) and dashes. Must start with a letter and end with a letter or number."
  ProjectId:
    Type: String
    Description: "Do NOT include <Prefix> or <StageId>. This is the Project ID for the application. (Minimum 2 characters, suggested maximum of 20) Ex: 'ws-hello-world-test' the Prefix would be 'ws', ProjectId would be 'hello-world', and the StageId would be 'test'. If you get 'S3 bucket name too long' errors then you must shorten the Project ID or use an S3 Org Prefix. Long Project IDs may also be truncated when naming resources."
    AllowedPattern: "^[a-z][a-z0-9-]*[a-z0-9]$"
    MinLength: 2
    ConstraintDescription: "Minimum of 2 characters (suggested maximum of 20). Alphanumeric (lower case) and dashes. Must start with a letter and end with a letter or number."
  StageId:
    Type: String
    Description: "Do NOT include <Prefix> or <ProjectId>. <StageId> does not need to match <DeployEnvironment>. You can have multiple stages in the TEST environment (e.g. test, john-test), and multiple stages in PROD (e.g. stage, beta, prod). Ex: 'ws-hello-world-test' the Prefix would be 'ws', ProjectId would be 'hello-world', and the StageId would be 'test'."
    AllowedPattern: "^[a-z][a-z0-9-]*[a-z0-9]$"
    MinLength: 2
    MaxLength: 10
    ConstraintDescription: "2 to 10 characters. Alphanumeric (lower case) and dashes. Must start with a letter and end with a letter or number."
  S3BucketNameOrgPrefix:
    Type: String
    Description: "By default, to enforce uniqueness, buckets created for deploy and infrastructure include account and region in the bucket name. However, due to S3 bucket name character limits, you can turn this off by specifying your own prefix (like an org code) that will be included before the project <Prefix> above."
    Default: ""
    AllowedPattern: "^[a-z][a-z0-9-]*[a-z0-9]$|^$"
    ConstraintDescription: "May be empty or at least 2 characters long. Must start with a letter, may contain lowercase letters, numbers, and hyphens."

  # ---------------------------------------------------------------------------
  # Deployment Environment Identification

  DeployEnvironment:
    Type: String
    Description: "What deploy/testing environment will this run under? An environment can contain multiple stages and in coordination with run different tests. Utilize this environment variable to determine your tests and app logging levels during deploy. This can be used for conditionals in the template. For example, PROD will use gradual deployment while DEV and TEST is AllAtOnce. Other resources, such as dashboards are created in PROD and not DEV or TEST. Suggested use: DEV for local SAM deployment, TEST for cloud deployment, PROD for stage, beta, and main/prod deployment."
    Default: "PROD"
    AllowedValues: ["DEV", "TEST", "PROD"]
    ConstraintDescription: "Must specify DEV, TEST, or PROD."

  # ---------------------------------------------------------------------------
  # External Resources and Alarm Notifications

  AppParameterStorePath:
    Type: String
    Description: "Path in Parameter Store reserved for this specific application's infrastructure such as /<ParameterStoreBasePathFromDeployPipeline>/<Prefix>-<ProjectId>-<StageId>/<AppParameterUsedByApplication>"
    Default: "/"
    AllowedPattern: "^\\/([a-zA-Z0-9]+([\\-][a-zA-Z0-9]+)*[\\/])+$|^\\/$"
    ConstraintDescription: "Must only contain alpha-numeric, dashes, or slashes. Must be a single slash or begin and end with a slash /."
  AlarmNotificationEmail:
    Type: String
    Description: "Email address to send a notification to when Lambda function goes into alarm. Be sure to check the inbox for this email address as you will need to confirm the subscription."
    AllowedPattern: '^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$'
    ConstraintDescription: "A valid email must be used to receive alarm notifications"

  # ---------------------------------------------------------------------------
  # Lambda Function Settings

  FunctionTimeOutInSeconds:
    Type: Number
    Description: "Time out in seconds for the Lambda function. API Gateway times out after 30 seconds. This web service is ideal for requests that can complete in less than 10 seconds"
    Default: 10
    MinValue: 3
    MaxValue: 30
  FunctionMaxMemoryInMB:
    Type: Number
    Description: "If you are handling large responses, you will need to increase the size. Monitor CloudWatch logs"
    Default: 128
    AllowedValues: [128, 192, 256, 320, 384, 448, 512]
    ConstraintDescription: "Min 128, Max 512 in increments of 64"
  FunctionGradualDeploymentType:
    Type: String
    Description: "For production environments, what method do you want to use to gradually deploy before rolling back in case of errors. Note that when 'DeployEnvironment' is TEST or DEV, gradual deploy will not be enabled and will be same as All At Once"
    Default: "Linear10PercentEvery3Minutes"
    AllowedValues:
      - "Canary10Percent5Minutes" # Canary = First 10%, then after x minutes, full 90% (full deploy after x minutes)
      - "Canary10Percent10Minutes"
      - "Canary10Percent15Minutes"
      - "Canary10Percent30Minutes"
      - "Linear10PercentEvery1Minute" # Linear = Total of 10 deploys every x minutes: 10%, wait x minutes, another 10%, wait, 10%.... (full deploy after 10 * x minutes)
      - "Linear10PercentEvery2Minutes"
      - "Linear10PercentEvery3Minutes"
      - "Linear10PercentEvery10Minutes"
      - "AllAtOnce" # All at once. Recommended only for TEST and DEV environments.
  DeployRole:
    Type: String
    Description: "IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions"

  # ---------------------------------------------------------------------------
  # Application Settings

  ApiPathBase:
    Type: String
    Description: "The path API Gateway uses as the first segment in the invoked Uniform Resource Identifier (URI). Since API Gateway generates random characters for the domain, it can be helpful to use this in identifying applications and stages. If a custom domain is used it can be masked and hidden from visitors. For example: xyz08ryz.apigateway.aws.com/pets or xyz08ryz.apigateway.aws.com/myapp or xyz08ryz.apigateway.aws.com/myapp-test. It is recommended you set this in the template-config.json file and allow the stage to be dynamically appended."
    Default: "api"
    AllowedPattern: ^[a-z0-9]([a-z0-9-_]*[a-z0-9])?$
    MaxLength: 128
    MinLength: 1
    ConstraintDescription: "1-128 lowercase alpha numeric, hyphens, and underscores. Must begin and end with an alphanumeric character."
  UserAgent:
    Type: String
    Description: "When making requests to external APIs, the web service will include this User Agent string in the header. How do you want your web service to identify itself to other servers?"
    Default: "Web Service"
  LogRetentionInDaysForPROD:
    Type: Number
    Description: "How long should CloudWatch logs be kept in a PRODUCTION environment?"
    Default: 90
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  LogRetentionInDaysForDEVTEST:
    Type: Number
    Description: "How long should CloudWatch logs be kept in a DEV or TEST environment?"
    Default: 7
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]

  # ---------------------------------------------------------------------------
  # Cache-Data Parameters

  CacheData_DbMaxCacheSizeInKB:
    Type: Number
    Description: "DynamoDb does better when storing smaller pieces of data. Choose the cut-off in KB that large objects should be stored in S3 instead (10)"
    Default: 10
    MinValue: 10
    MaxValue: 200
    ConstraintDescription: "Numeric value between 10 and 200 (inclusive)"
  CacheData_CryptIdHashAlgorithm:
    Type: String
    Description: "Hash algorithm used for generating the URI ID to identify cached requests. This is for generating IDs, not crypto."
    Default: "RSA-SHA256"
    AllowedValues: ["RSA-SHA256", "RSA-SHA3-224", "RSA-SHA3-256", "RSA-SHA3-384", "RSA-SHA3-512"]
    ConstraintDescription: "Use possible hashes available from Node.js in the RSA- category (RSA-SHA256 to RSA-SM3)"
  CacheData_CryptSecureDataAlg:
    Type: String
    Description: "Cryptographic algorithm to use for storing sensitive cached data in S3 and DynamoDb"
    Default: "aes-256-cbc"
    AllowedValues: ["aes-256-cbc", "aes-256-cfb", "aes-256-cfb1", "aes-256-cfb8", "aes-256-ofb"]
    ConstraintDescription: "Use possible cipher algorithms available (crypto.getCiphers()) from Node.js in the aes-256-xxx category"
  CacheData_ErrorExpirationInSeconds:
    Type: Number
    Description: "How long should errors be cached? This prevents retrying a service that is currenlty in error too often (300 is recommended)"
    Default: 300
    MinValue: 1
    ConstraintDescription: "Choose a value of 1 or greater"
  CacheData_PurgeExpiredCacheEntriesInHours:
    Type: Number
    Description: "The number of hours expired cached data should be kept before purging. Expired cache data may be used if the source returns an error."
    Default: 24
    MinValue: 1
    ConstraintDescription: "Choose a value of 1 or greater"
  CacheData_PurgeAgeOfCachedBucketObjInDays:
    Type: Number
    Description: "Similar to CacheData_PurgeExpiredCacheEntriesInHours, but for the S3 Bucket. S3 calculates from time object is created/last modified (not accessed). This should be longer than your longest cache expiration set in custom/policies. Keeping objects in S3 for too long increases storage costs. (30 is recommended)"
    Default: 15
    MinValue: 3
    ConstraintDescription: "Choose a value of 3 days or greater. This should be slightly longer than the longest cache expiration expected"
  CacheData_TimeZoneForInterval:
    Type: String
    Description: "Cache-Data may expire using an interval such as every four, six, twelve, ... hours on the hour starting at midnight. What timezone holds the midnight to calculate from?"
    Default: "Etc/UTC"
    AllowedValues: ["Etc/UTC", "America/Puerto_Rico", "America/New_York", "America/Indianapolis", "America/Chicago", "America/Denver", "America/Phoenix", "America/Los_Angeles", "America/Anchorage", "Pacific/Honolulu"] # https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
    ConstraintDescription: "Common examples for United States of America. Accepted values can be changed in the template for your region."

# =============================================================================
# CONDITIONS
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-conditions.html
#

Conditions:
  IsProduction: !Equals [!Ref DeployEnvironment, "PROD"]
  IsNotProduction: !Not [!Equals [!Ref DeployEnvironment, "PROD"]]
  IsTest: !Equals [!Ref DeployEnvironment, "TEST"]
  IsDevelopment: !Equals [!Ref DeployEnvironment, "DEV"]
  CreateProdResources: !Equals [!Ref DeployEnvironment, "PROD"]
  CreateTestResources: !Equals [!Ref DeployEnvironment, "TEST"]
  CreateDevResources: !Equals [!Ref DeployEnvironment, "DEV"]
  UseS3BucketNameOrgPrefix: !Not [!Equals [!Ref S3BucketNameOrgPrefix, ""]]
  CreateAlarms: !Equals [!Ref DeployEnvironment, "PROD"] # !Equals ["ALWAYS", "ALWAYS"] # Option if you want to ALWAYS create an alarm or only in PROD. Alarms cost money so you may only want them in Prod (or temporarily in test)

# =============================================================================
# GLOBALS
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy-globals.html
#

Globals:
  Function:
    Timeout: !Ref FunctionTimeOutInSeconds
    MemorySize: !Ref FunctionMaxMemoryInMB
    Runtime: nodejs14.x
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: !If [ IsProduction, True,  False] #Gradual deployment only if in production so DEV and TEST aren't hindered
      Type: !If [ IsProduction, !Ref FunctionGradualDeploymentType, "AllAtOnce"]
      Role: !Ref DeployRole
      Alarms:
        # You can add additional alarms, one is created for you
        #- !If [CreateAlarms, !Ref AppFunctionErrorsAlarm, []] # Either PROD or ALWAYS - Check Conditions
        - !Ref AppFunctionErrorsAlarm

  Api:
    OpenApiVersion: 3.0.0 # Prevents extra stage called Stage in API Gateway https://www.internetkatta.com/how-to-prevent-aws-sam-from-creating-the-default-stage-in-api-gateway-stage

# =============================================================================
# RESOURCES
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html  
#

Resources:

  # ---------------------------------------------------------------------------
  # API Gateway, Lambda, and Monitoring

  # -- API Gateway --
  WebApi:
    Type: AWS::Serverless::Api
    Properties: 
      Name: !Sub '${Prefix}-${ProjectId}-${StageId}-WebApi'
      StageName: !Ref ApiPathBase
      DefinitionBody:
        "Fn::Transform":
          Name: "AWS::Include"
          Parameters:
            Location: ./swagger.yml
            
  # -- Lambda Function --
  AppFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Prefix}-${ProjectId}-${StageId}-AppFunction'
      CodeUri: app/
      Handler: index.handler
      Environment:
        Variables:
          detailedLogs: !If [ IsProduction, "0",  "2"]
          deployEnvironment: !Ref DeployEnvironment
          paramStorePath: !Ref AppParameterStorePath
          user_agent_identifier: !Ref UserAgent
          lambdaTimeoutInSeconds: !Ref FunctionTimeOutInSeconds # so we can calculate any external connection timeout in our code

          # Cache-Data settings
          CacheData_DynamoDbTable: !Ref CacheData_DynamoDbTable
          CacheData_S3Bucket: !Ref CacheData_S3Bucket
          CacheData_CryptSecureDataAlgorithm: !Ref CacheData_CryptSecureDataAlg
          CacheData_CryptIdHashAlgorithm: !Ref CacheData_CryptIdHashAlgorithm
          CacheData_DynamoDb_maxCacheSize_kb: !Ref CacheData_DbMaxCacheSizeInKB
          CacheData_PurgeExpiredCacheEntriesAfterXHours: !Ref CacheData_PurgeExpiredCacheEntriesInHours
          CacheData_ErrorExpiresInSeconds: !Ref CacheData_ErrorExpirationInSeconds
          CacheData_TimeZoneForInterval: !Ref CacheData_TimeZoneForInterval

      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref WebApi
        PostEvent:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref WebApi
            
      Role: !GetAtt LambdaExecutionRole.Arn

  # -- LambdaFunction Execution Role --
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Description: "IAM Role that allows the Lambda permission to execute and access resources"
    Properties:
      RoleName: !Sub "${Prefix}-${ProjectId}-${StageId}-ExecutionRole"
      Path: /

      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole

      # These are the resources your Lambda function needs access to
      # Logs, SSM Parameters, DynamoDb, S3, etc.
      # Define specific actions such as get/put (read/write)
      Policies:
      - PolicyName: LambdaResourceAccessPolicies
        PolicyDocument:
          Statement:

          - Sid: LambdaAccessToWriteLogs
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: !GetAtt AppLogGroup.Arn

          - Sid: LambdaAccessToSSMParameters
            Action:
            - ssm:DescribeParameters
            - ssm:GetParameters
            - ssm:GetParameter
            - ssm:GetParametersByPath
            Effect: Allow
            Resource: 
              !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${AppParameterStorePath}*" # no / between :parameter and path or before *

          # cache-data S3 bucket
          - Sid: LambdaAccessToS3BucketCacheData
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:GetObjectVersion
            Effect: Allow
            Resource: !Join [ '', [ !GetAtt S3DeployBucket.Arn, '/cache/*' ] ]

          # cache-data DynamoDb table
          - Sid: LambdaAccessToDynamoDBTableCacheData
            Action:
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:BatchGetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:BatchWriteItem
            Effect: Allow
            Resource: !GetAtt: CacheDataDynamoDbTable.Arn

  # -- Permissions allowing API Gateway to Execute Lambda via Web Console Test button --
  # See https://github.com/awslabs/serverless-application-model/issues/59#issuecomment-348709355
  ConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AppFunction
      Principal: apigateway.amazonaws.com

  # -- Lambda Function Error Alarm --
  AppFunctionErrorsAlarm:
    Type: "AWS::CloudWatch::Alarm"
    # Condition: CreateAlarms # Either PROD or ALWAYS - Check Conditions
    Properties:
      AlarmDescription: Lambda Function Error > 0
      MetricName: Errors
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      Period: 900
      EvaluationPeriods: 1
      TreatMissingData: notBreaching
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref AppFunction
      AlarmActions:
        - Ref: AppFunctionErrorAlarmNotification

  # -- Lambda Function Notification for Error Alarm --
  AppFunctionErrorAlarmNotification:
      Type: AWS::SNS::Topic
      # Condition: CreateAlarms # Either PROD or ALWAYS - Check Conditions
      Properties: 
        DisplayName: !Sub 'AWS-Alarm-${Prefix}-${ProjectId}-${StageId}'
        FifoTopic: false
        Subscription:
          - Endpoint: !Ref AlarmNotificationEmail
            Protocol: 'email'

  # ---------------------------------------------------------------------------
  # Resources for Lambda Function

  # -- Log Group with a retention policy --
  AppLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
        LogGroupName: !Sub '/aws/lambda/${Prefix}-${ProjectId}-${StageId}-AppFunction' # Avoid circular reference !Sub "/aws/lambda/${AppFunction}"
        RetentionInDays: !If [ IsProduction, !Ref LogRetentionInDaysForPROD,  !Ref LogRetentionInDaysForDEVTEST]

  # ---------------------------------------------------------------------------
  # Resources for Lambda Function - Cache-Data

  # -- Cache-Data DynamoDb --
  CacheDataDynamoDbTable:
    Type: AWS::DynamoDB::Table
    Description: Table to store Cache-Data. 
    Properties:
      TableName: !Sub '${Prefix}-${ProjectId}-${StageId}-CacheData'
      AttributeDefinitions: 
        - AttributeName: "id_hash"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "id_hash"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TimeToLiveSpecification:
        AttributeName: "purge_ts"
        Enabled: true
      SSESpecification:
        SSEEnabled: true

  # -- Cache-Data S3 --
  CacheDataS3Bucket:
    Type: AWS::S3::Bucket
    Description: S3 Bucket to store Cache-Data too big for DynamoDb. Cache-Data stores objects in /cache directory. The application may store additional data outside of the cache directory.
    Properties:
      BucketName: !Join
        - "-"
        - - !If [UseS3BucketNameOrgPrefix, !Sub "${S3BucketNameOrgPrefix}-${Prefix}", !Sub "${Prefix}-${AWS::Region}-${AWS::AccountId}" ]
          - !Sub "${ProjectId}-${StageId}-cachedata"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: "ExpireObjects"
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            ExpirationInDays: !Ref CacheData_PurgeAgeOfCachedBucketObjInDays
            Prefix: "cache" # this will limit this policy to YOURBUCKETNAME/cache/*
            NoncurrentVersionExpirationInDays: !Ref CacheData_PurgeAgeOfCachedBucketObjInDays
            Status: "Enabled" # Enable only if you are going to use this LifecycleConfiguration

  # -- S3 Bucket Policy for Lambda App Data Storage --
  CacheDataS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CacheDataS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Id: SecurityPolicy
        Statement:
          - Sid: "DenyNonSecureTransportAccess"
            Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !GetAtt CacheDataS3Bucket.Arn
              - !Join [ '', [ !GetAtt CacheDataS3Bucket.Arn, '/*' ] ]
            Condition:
              Bool:
                "aws:SecureTransport": false

          # - Sid: WhitelistLambdaExecutionRole
          #   Action: "s3:*"
          #   Effect: Deny
          #   Principal: "*"
          #   Resource:
          #     - !GetAtt CacheDataS3Bucket.Arn
          #     - !Join [ '', [ !GetAtt CacheDataS3Bucket.Arn, '/*' ] ]
          #   Condition:
          #     StringNotEquals: {
          #       "aws:PrincipalArn": [
          #         !GetAtt LambdaExecutionRole.Arn,
          #       ]
          #     }

  # ---------------------------------------------------------------------------
  # Monitoring

  # -- CloudWatch Dashboard --
  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: CreateProdResources
    Properties:
      DashboardName: !Sub '${Prefix}-${ProjectId}-${StageId}-Dashboard'
      DashboardBody: !Sub |
        {
            "widgets": [
                {
                    "type": "text",
                    "x": 0,
                    "y": 0,
                    "width": 24,
                    "height": 3,
                    "properties": {
                        "markdown": "# ${Prefix}-${ProjectId}-${StageId}-Dashboard"
                    }
                },
                {
                    "height": 6,
                    "width": 6,
                    "y": 3,
                    "x": 0,
                    "type": "metric",
                    "properties": {
                        "metrics": [
                            [ { "expression": "SEARCH('{AWS/Lambda,FunctionName}', 'Average', 3600)", "id": "e1", "visible": false, "region": "${AWS::Region}" } ],
                            [ "AWS/Lambda", "Invocations", "FunctionName", "${AppFunction}", { "id": "m2", "color": "#1f77b4" } ],
                            [ ".", "Errors", ".", ".", { "id": "m4", "color": "#d62728" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "title": "Invocations",
                        "period": 3600,
                        "stat": "Sum"
                    }
                },
                {
                    "height": 6,
                    "width": 6,
                    "y": 3,
                    "x": 6,
                    "type": "metric",
                    "properties": {
                        "metrics": [
                            [ { "expression": "SEARCH('{AWS/Lambda,FunctionName}', 'Average', 300)", "id": "e1", "period": 300, "visible": false, "region": "${AWS::Region}" } ],
                            [ "AWS/Lambda", "Duration", "FunctionName", "${AppFunction}", { "id": "m1" } ],
                            [ "...", { "id": "m2", "stat": "Maximum", "color": "#d62728" } ],
                            [ "...", { "id": "m3", "stat": "Minimum", "color": "#2ca02c" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "title": "Avg Duration",
                        "period": 3600,
                        "stat": "Average"
                    }
                },
                {
                    "height": 6,
                    "width": 6,
                    "y": 3,
                    "x": 12,
                    "type": "metric",
                    "properties": {
                        "view": "timeSeries",
                        "stacked": false,
                        "metrics": [
                            [ "AWS/Lambda", "ConcurrentExecutions", "FunctionName", "${AppFunction}" ]
                        ],
                        "region": "${AWS::Region}",
                        "title": "Concurrent Executions"
                    }
                },
                {
                    "height": 6,
                    "width": 6,
                    "y": 9,
                    "x": 0,
                    "type": "metric",
                    "properties": {
                        "metrics": [
                            [ "AWS/ApiGateway", "5XXError", "ApiName", "tmg6tb67l9", { "color": "#d62728" } ],
                            [ ".", "4XXError", ".", ".", { "color": "#9467bd" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "stat": "Sum",
                        "period": 3600,
                        "title": "API Gateway Errors"
                    }
                },
                {
                    "height": 6,
                    "width": 6,
                    "y": 9,
                    "x": 6,
                    "type": "metric",
                    "properties": {
                        "metrics": [
                            [ { "expression": "SEARCH('{AWS/Lambda,FunctionName}', 'Average', 300)", "id": "e1", "period": 300, "visible": false, "region": "${AWS::Region}" } ],
                            [ "AWS/Lambda", "Errors", "FunctionName", "${AppFunction}", { "id": "m4", "visible": false, "stat": "Sum", "color": "#d62728", "period": 3600 } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "title": "Lambda Errors",
                        "period": 300,
                        "stat": "Average"
                    }
                },
                {
                  "type": "alarm",
                  "x": 12,
                  "y": 9,
                  "width": 6,
                  "height": 2,
                  "properties": {
                    "title": "Alarms",
                    "alarms": [
                      "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${AppFunctionErrorsAlarm}"
                    ]
                  }
                },
                {
                    "height": 3,
                    "width": 24,
                    "y": 15,
                    "x": 0,
                    "type": "log",
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${AppFunction}' | filter @type = \"REPORT\"\n| stats max(@memorySize / 1024 / 1024) as provisonedMemoryMB,\n    min(@maxMemoryUsed / 1024 / 1024) as smallestMemoryRequestMB,\n    avg(@maxMemoryUsed / 1024 / 1024) as avgMemoryUsedMB,\n    max(@maxMemoryUsed / 1024 / 1024) as maxMemoryUsedMB,\n    provisonedMemoryMB - maxMemoryUsedMB as overProvisionedMB",
                        "region": "${AWS::Region}",
                        "title": "Memory",
                        "view": "table"
                    }
                },
                {
                    "height": 3,
                    "width": 24,
                    "y": 18,
                    "x": 0,
                    "type": "log",
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${AppFunction}' | filter @type=\"REPORT\"\n| fields (@duration<100) as R100,\n  (@duration>=100 and @duration<250) as R100_250,\n  (@duration>=250 and @duration<500) as R250_500,\n  (@duration>=500 and @duration<750) as R500_750,\n  (@duration>=750 and @duration<1000) as R750_1000,\n  (@duration>=1000 and @duration<=2000) as R1000_2000,\n  (@duration>=2000 and @duration<=3000) as R2000_3000,\n  (@duration>=3000 and @duration<=4000) as R3000_4000,\n  (@duration>=4000 and @duration<=5000) as R4000_5000,\n  (@duration>=5000 and @duration<=6000) as R5000_6000,\n  (@duration>=6000 and @duration<=7000) as R6000_7000,\n  (@duration>=7000 and @duration<=8000) as R7000_8000,\n  (@duration>=8000 and @duration<=9000) as R8000_9000,\n  (@duration>=9000 and @duration<=10000) as R9000_10000,\n  (@duration>10000) as R10000\n| stats min(@duration) as minDur,\n  avg(@duration) as avgDur,\n  max(@duration) as maxDur,\n  sum(R100) as D100ms,\n  sum(R100_250) as D100_250ms,\n  sum(R250_500) as D250_500ms,\n  sum(R500_750) as D500_750ms,\n  sum(R750_1000) as D750_1000ms,\n  sum(R1000_2000) as D1_2s,\n  sum(R2000_3000) as D2_3s,\n  sum(R3000_4000) as D3_4s,\n  sum(R4000_5000) as D4_5s,\n  sum(R5000_6000) as D5_6s,\n  sum(R6000_7000) as D6_7s,\n  sum(R7000_8000) as D7_8s,\n  sum(R8000_9000) as D8_9s,\n  sum(R9000_10000) as D9_10s,\n  sum(R10000) as D10s",
                        "region": "${AWS::Region}",
                        "title": "Durations",
                        "view": "table"
                    }
                },
                {
                    "height": 6,
                    "width": 24,
                    "y": 21,
                    "x": 0,
                    "type": "log",
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${AppFunction}' | fields @timestamp as ts, @message\n| sort ts desc\n| limit 500\n| PARSE @message \"[*] * | * | * | * | * | * | * | * | * | * | *\" as loggingType, uriID, statusCode, dataFrom, bodySize, execTime, endpoint, clientIP, userAgent, origin, referer, keyID\n| FILTER loggingType = \"RESPONSE\"\n| DISPLAY ts, uriID, statusCode, dataFrom, bodySize, execTime, endpoint, clientIP, userAgent, origin, referer, keyID",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "view": "table",
                        "title": "Response Log"
                    }
                },
                {
                    "height": 6,
                    "width": 24,
                    "y": 27,
                    "x": 0,
                    "type": "log",
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${AppFunction}' | fields @timestamp as ts, @requestId, @message, @logStream as logStream\n| sort ts desc\n| limit 500\n| PARSE @message \"[*] *\" as loggingType, loggingMessage\n| FILTER (loggingType = \"ERROR\" or loggingType = \"WARN\" or @message like \"Task timed out\")\n| DISPLAY ts, logStream, loggingType, loggingMessage",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "Error and Warning Log",
                        "view": "table"
                    }
                },
                {
                    "height": 3,
                    "width": 24,
                    "y": 33,
                    "x": 0,
                    "type": "text",
                    "properties": {
                        "markdown": "## Endpoint Cache\n\nCalls to external endpoints are cached internally.\n\nAdjust the cache policies to utilize the cache more or less often depending upon the update frequency of the data, the importance of changes being reflected in the cache, and to avoid external API limits."
                    }
                },
                {
                    "height": 6,
                    "width": 18,
                    "y": 36,
                    "x": 0,
                    "type": "log",
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${AppFunction}' | fields @timestamp as ts, @message\n| limit 500\n| PARSE @message \"[*] * | * | * | *\" as loggingType, id, endpoint, result, execTime\n| FILTER (loggingType = \"CACHE\")\n| stats count(*) as requests, min(execTime) as min_ms, ceil(avg(execTime)) as avg_ms, max(execTime) as max_ms by endpoint\n| sort requests desc\n",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "Endpoint Request Log",
                        "view": "table"
                    }
                },
                {
                    "height": 9,
                    "width": 21,
                    "y": 42,
                    "x": 0,
                    "type": "log",
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${AppFunction}' | fields @timestamp as ts, @message\n| limit 500\n| PARSE @message \"[*] * | * | * | *\" as loggingType, id, endpoint, result, execTime\n| FILTER (loggingType = \"CACHE\")\n| stats count(*) as requests, min(execTime) as min_ms, ceil(avg(execTime)) as avg_ms, max(execTime) as max_ms by endpoint, result\n| sort endpoint asc, result asc",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "Endpoint Cache Utilization",
                        "view": "table"
                    }
                },
                {
                    "height": 6,
                    "width": 12,
                    "y": 51,
                    "x": 0,
                    "type": "log",
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${AppFunction}' | fields @timestamp as ts, @message\n| limit 500\n| PARSE @message \"[*] * | * | * | *\" as loggingType, id, endpoint, result, execTime\n| FILTER (loggingType = \"CACHE\")\n| stats count(*) as requests, min(execTime) as min_ms, ceil(avg(execTime)) as avg_ms, max(execTime) as max_ms by result\n| sort requests desc\n",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "Cache Utilization",
                        "view": "table"
                    }
                },
                {
                    "height": 6,
                    "width": 12,
                    "y": 51,
                    "x": 12,
                    "type": "log",
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${AppFunction}' | fields @timestamp as ts, @message\n| limit 10\n| PARSE @message \"[*] * | * | * | *\" as loggingType, id, endpoint, result, execTime\n| FILTER (loggingType = \"CACHE\")\n| stats count(*) as requests by result\n| sort result asc\n",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "Cache Utilization Visual",
                        "view": "pie"
                    }
                },
                {
                    "height": 3,
                    "width": 24,
                    "y": 57,
                    "x": 0,
                    "type": "text",
                    "properties": {
                        "markdown": "## Cold Starts\n\n\nA cold start is when a Lambda function is loaded for execution. After execution, the Lambda function will reside in memory for up to 45 minutes waiting for additional executions.\n\n\nCold starts will occur for each new concurrent execution and after a Lambda function has been dormant for a period of time."
                    }
                },
                {
                    "height": 3,
                    "width": 24,
                    "y": 60,
                    "x": 0,
                    "type": "log",
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${AppFunction}' | filter @type=\"REPORT\"\n| fields @initDuration\n| stats min(@duration) as minDur,\n  avg(@initDuration) as avgDur,\n  max(@initDuration) as maxDur,\n  count(@initDuration) as num",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "Cold Starts",
                        "view": "table"
                    }
                },
                {
                    "height": 6,
                    "width": 18,
                    "y": 63,
                    "x": 0,
                    "type": "log",
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${AppFunction}' | fields @timestamp as ts, @message, @logStream as logStream\n| sort ts desc\n| limit 100\n| PARSE @message \"[*] *\" as loggingType, ms\n| FILTER (loggingType = \"COLDSTART\")\n| DISPLAY ts, ms, logStream",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "Init after Cold Start",
                        "view": "table"
                    }
                }
            ]
        }

# =============================================================================
# OUTPUTS
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
#
# Place anything interesting that you would like to quickly refer to in 
# your cloudformation OUTPUT section. Test URLs, direct links to resources, etc
#

Outputs:
  APIEndpoint:
    Description: "Endpoint URL"
    Value: !Sub "https://${WebApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiPathBase}/"
  APIEndpointTest:
    Description: "Endpoint Test URL"
    Value: !Sub "https://${WebApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiPathBase}/?q=Chicago"
  LambdaWebConsole:
    Description: "Lambda Web Console"
    Value: !Sub "https://console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${AppFunction}?tab=code"
  DynamoDbWebConsole:
    Description: "DynamoDb Table Web Console"
    Value: !Sub "https://console.aws.amazon.com/dynamodbv2/home?region=${AWS::Region}#table?name=${CacheDataDynamoDbTable}&initialTableGroup=%23all"
  S3BucketWebConsole:
    Description: "S3 Bucket Web Console"
    Value: !Sub "https://s3.console.aws.amazon.com/s3/buckets/${CacheDataS3Bucket}?region=${AWS::Region}"
  SSMParameterStore:
    Description: "SSM Parameter Store Location"
    Value: !Ref AppParameterStorePath