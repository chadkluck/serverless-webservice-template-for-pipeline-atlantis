AWSTemplateFormatVersion: 2010-09-09
# Comments with 3#'s (###) are reserved for true CodeStar projects. Remove the 3#'s for true CodeStar projects

Transform:
- AWS::Serverless-2016-10-31
###- AWS::CodeStar # Uncomment for CodeStar projects - Leave commented for ProjectStack

Description: "demo-web-service: Web Service as a template"

# =============================================================================
# PARAMETERS
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
#

Parameters:

  # ---------------------------------------------------------------------------
  # ProjectStack/CodeStar Environment Parameters

  ProjectId:
    Description: "The Project ID for the application. For CodeStar this will be the same as ProjectStageId. (Minimum 2 characters, and, if it is a CodeStar project, max of 15 characters). The Stage parameter will be appended to the ProjectID and must be taken into account as the max length of ProjectID is 15 characters."
    Type: String
    AllowedPattern: "^[a-z][a-z0-9-]+$"
    MinLength: 2
  ProjectStageId:
    Description: "The Project ID for the application with the stage appended (if there is a stage). If it is a CodeStar project, max of 15 characters and it will be the same as ProjectID."
    Type: String
    AllowedPattern: "^[a-z][a-z0-9-]+$"
    MinLength: 2
    ConstraintDescription: "Must contain only lowercase alphanumeric characters, dash, or underscore, and be between 2 and 15 characters in length."
  Prefix:
    Description: Prefix to assign to resources
    Type: String
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9-]*[a-zA-Z0-9]"
    MinLength: 3
    MaxLength: 15
    ConstraintDescription: 3 to 15 characters. Alphanumeric (upper and lower), hyphen, and underscore. Must start with a letter and must end with a letter or number.
    Default: "awscodestar"
  DeployStage:
    Description: "This project represents what stage in the CI/CD pipeline? (test, beta, stage, prod). This should be equal to the deployment stage appended to the Project ID. The project ID plus the stage value must not exceed 15 characters."
    Type: String
    AllowedPattern: "[a-z0-9]*"
    MaxLength: 12
    ConstraintDescription: "Must contain only lowercase alphanumeric characters and be no more than 12 characters in length."
    Default: "" 
  DeployEnvironment:
    Description: "What deploy/testing environment will this run under? An environment can contain mulitple stages and in coordination with run different tests. Utilize this environment variable to determine your tests and app logging levels during deploy"
    Type: String
    AllowedValues: [DEV, TEST, PROD]
    ConstraintDescription: Must specify DEV, TEST, or PROD.
    Default: "DEV" 
  DeployRole:
    Type: String
    Description: "IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions"
  ParameterStoreAppPath:
    Description: "Parameter store path to organize parameters for this application. The value is in the format of: /<ParameterStoreBasePath>/<ProjectStageId>/"
    Type: String
    AllowedPattern: "^\\/([a-zA-Z0-9]+([\\-][a-zA-Z0-9]+)*[\\/])+$|^\\/$"
    ConstraintDescription: Must only contain alpha-numeric, dashes, or slashes. Must begin and end with a slash /.
    Default: "/"
  AlarmNotificationEmail:
    Type: String
    Description: "Email address to send a notification to when Lambda function goes into alarm"
    AllowedPattern: '^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$'
    ConstraintDescription: 'A valid email must be used to receive alarm notifications'

  # ---------------------------------------------------------------------------
  # Application Parameters

  ApiPathBase:
    Type: String
    Default: "api"
    Description: "The name of the API base path, which API Gateway uses as the first path segment in the invoked Uniform Resource Identifier (URI). API Gateway refers to this as StageName and uses 'Prod' as default, but it is unrelated to the DeployStage parameter. For example: apigatewaydomain.com/Prod or apigatewaydomain.com/api or apigatewaydomain.com/myapp. A custom domain setting can mask the base path. However, if using the API Gateway generic URL, it could be used to provide an indicator of what app lies at the endpoint or even what depoly stage (e.g. 'cache-api' or 'cache-api-test')"
    AllowedPattern: ^[a-z]([a-z0-9-_])+$
    MaxLength: 128
    MinLength: 1
    ConstraintDescription: "1-128 lowercase alpha numeric, hyphens, and underscores"
  DbMaxCacheSizeInKB:
    Type: Number
    Default: 10
    Description: "DynamoDb does better when storing smaller pieces of data. Choose the cut-off in KB that large objects should be stored in S3 instead (10)"
    MinValue: 10
    MaxValue: 200
    ConstraintDescription: "Numeric value between 10 and 200 (inclusive)"
  CryptIdHashAlgorithm:
    Type: String
    Default: "RSA-SHA256"
    Description: "Hash algorithm used for generating the URI ID to identify cached requests. This is for generating IDs, not crypto."
    AllowedValues:
      - "RSA-SHA256"
      - "RSA-SHA3-224"
      - "RSA-SHA3-256"
      - "RSA-SHA3-384"
      - "RSA-SHA3-512"
    ConstraintDescription: "Use possible hashes available from Node.js in the RSA- category (RSA-SHA256 to RSA-SM3)"
  CryptSecureDataAlg:
    Type: String
    Default: "aes-256-cbc"
    Description: "Cryptographic algorithm to use for storing sensitive cached data"
    AllowedValues:
      - "aes-256-cbc"
      - "aes-256-cfb"
      - "aes-256-cfb1"
      - "aes-256-cfb8"
      - "aes-256-ofb"
    ConstraintDescription: "Use possible cipher algorithms available (crypto.getCiphers()) from Node.js in the aes-256-xxx category"
  ErrorExpirationInSeconds:
    Type: Number
    Default: 300
    Description: "How long should errors be cached? This prevents retrying a service that is currenlty in error too often (300 is recommended)"
    MinValue: 1
    ConstraintDescription: "Choose a value of 1 or greater"
  PurgeExpiredCacheEntriesInHours:
    Type: Number
    Default: 24
    Description: "The number of hours expired cached data should be kept before purging. Expired cache data may be used if the source returns an error."
    MinValue: 1
    ConstraintDescription: "Choose a value of 1 or greater"
  PurgeAgeOfCachedBucketObjInDays:
    Type: Number
    Default: 15
    Description: "Similar to PurgeEpiredCachedEntriesInHours, but for the S3 Bucket. S3 calculates from time object is created/last modified (not accessed). This should be longer than your longest cache expiration set in custom/policies. Keeping objects in S3 for too long increases storage costs. (30 is recommended)"
    MinValue: 3
    ConstraintDescription: "Choose a value of 3 days or greater. This should be slightly longer than the longest cache expiration expected"
  UserAgent:
    Type: String
    Default: "Analytics Web Service"
    Description: "Analytics Web Service passes along the client's user agent string in the header. If no user agent string is present, what should it use?"
  LogRetentionInDaysForPROD:
    Type: Number
    Default: 90
    Description: "How long should CloudWatch logs be kept in a PRODUCTION environment?"
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653
  LogRetentionInDaysForDEVTEST:
    Type: Number
    Default: 7
    Description: "How long should CloudWatch logs be kept in a DEV or TEST environment?"
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
      - 60
      - 90
      - 120
      - 150
      - 180
      - 365
      - 400
      - 545
      - 731
      - 1827
      - 3653

  # ---------------------------------------------------------------------------
  # Lambda App Settings

  FunctionTimeOutInSeconds:
    Type: Number
    Default: 10
    Description: "Time out in seconds for the Lambda function. API Gateway times out after 30 seconds. This web service is ideal for requests that can complete in less than 10 seconds"
    MinValue: 3
    MaxValue: 30
  FunctionMaxMemoryInMB:
    Type: Number
    Default: 128
    Description: "If you are handling large responses, you will need to increase the size. Monitor CloudWatch logs"
    AllowedValues:
      - 128
      - 192
      - 256
      - 320
      - 384
      - 448
      - 512
    ConstraintDescription: "Min 128, Max 512 in increments of 64"
  FunctionGradualDeploymentType:
    Type: String
    Default: "Linear10PercentEvery3Minutes"
    Description: "For production environments, what method do you want to use to gradually deploy before rolling back in case of errors. Note that when 'DeployEnvironment' is TEST or DEV, gradual deploy will not be enabled and will be same as All At Once"
    AllowedValues:
      - "Canary10Percent5Minutes" # Canary = First 10%, then after x minutes, full 90% (full deploy after x minutes)
      - "Canary10Percent10Minutes"
      - "Canary10Percent15Minutes"
      - "Canary10Percent30Minutes"
      - "Linear10PercentEvery1Minute" # Linear = Total of 10 deploys every x minutes: 10%, wait x minutes, another 10%, wait, 10%.... (full deploy after 10 * x minutes)
      - "Linear10PercentEvery2Minutes"
      - "Linear10PercentEvery3Minutes"
      - "Linear10PercentEvery10Minutes"
      - "AllAtOnce" # All at once. Recommended only for TEST and DEV environments.


# =============================================================================
# CONDITIONS
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-conditions.html
#

Conditions:
  IsCodeStar: !Equals [!Ref Prefix, "awscodestar"]
  IsProduction: !Equals [!Ref DeployEnvironment, "PROD"]
  IsTest: !Equals [!Ref DeployEnvironment, "TEST"]
  IsDevelopment: !Equals [!Ref DeployEnvironment, "DEV"]
  IsNotProduction: !Not [!Equals [!Ref DeployEnvironment, "PROD"]]
  CreateProdResources: !Equals [!Ref DeployEnvironment, "PROD"]
  CreateTestResources: !Equals [!Ref DeployEnvironment, "TEST"]
  CreateDevResources: !Equals [!Ref DeployEnvironment, "DEV"]

# =============================================================================
# GLOBALS
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy-globals.html
#

Globals:
  Function:
    Timeout: !Ref FunctionTimeOutInSeconds
    MemorySize: !Ref FunctionMaxMemoryInMB
    Runtime: nodejs14.x
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: !If [ IsProduction, True,  False] #Gradual deployment only if in production so DEV and TEST aren't hindered
      Type: !If [ IsProduction, !Ref FunctionGradualDeploymentType, "AllAtOnce"]
      Role: !Ref DeployRole
      Alarms:
        # You can add additional alarms, one is created for you
        #- !If [IsProduction, !Ref AppFunctionErrorsAlarm, !Ref AWS::NoValue]  # how do we do a novalue for a list?
        - !Ref AppFunctionErrorsAlarm

  Api:
    OpenApiVersion: 3.0.0 # Prevents extra stage called Stage in API Gateway https://www.internetkatta.com/how-to-prevent-aws-sam-from-creating-the-default-stage-in-api-gateway-stage

# =============================================================================
# RESOURCES
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html  
#

Resources:

  # ---------------------------------------------------------------------------
  # API Gateway, Lambda, and Deploy Monitoring

  # -- API Gateway --
  WebApi:
    Type: AWS::Serverless::Api
    Properties: 
      Name: !Sub '${Prefix}-${ProjectStageId}-WebApi'
      StageName: !If [ IsCodeStar, "Prod", !Ref ApiPathBase] # First part of the path in the URI "https://${WebApi}.execute-api.${AWS::Region}.amazonaws.com/api/" CodeStar dashboard uses Prod. However, if you don't care, you can use your regular setting
      DefinitionBody:
        "Fn::Transform":
          Name: "AWS::Include"
          Parameters:
            Location: ./swagger.yml
            
  # -- Lambda Function --
  AppFunction: # If you rename FunctionName you need to rename this and vice versa
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Prefix}-${ProjectStageId}-AppFunction'
      CodeUri: app/
      Handler: index.handler
      Environment:
        Variables:
          detailedLogs: !If [ IsProduction, "0",  "2"]
          deployEnvironment: !Ref DeployEnvironment
          paramStorePath: !Ref ParameterStoreAppPath
          user_agent_identifier: !Ref UserAgent

          # Cache settings
          DynamoDb_table_cache: !Ref AppDataDynamoDbTable
          S3_bucket_cache: !Ref AppDataS3Bucket
          crypt_secureDataAlgorithm: !Ref CryptSecureDataAlg
          crypt_idHashAlgorithm: !Ref CryptIdHashAlgorithm
          DynamoDb_maxCacheSize_kb: !Ref DbMaxCacheSizeInKB
          purgeExpiredCacheEntriesAfterXHours: !Ref PurgeExpiredCacheEntriesInHours
          errorExpiresInSeconds: !Ref ErrorExpirationInSeconds
          lambdaTimeoutInSeconds: !Ref FunctionTimeOutInSeconds # so we can calculate any external connection timeout in our code


      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref WebApi
        PostEvent:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref WebApi
            
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn

  # -- LambdaFunction Execution Role --
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Join
        - '-'
        - - !If [ IsCodeStar, 'CodeStar', !Ref Prefix ] # CodeStar requires Camel Case in this instance
          - !Ref ProjectStageId
          - "ExecutionRole"

      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole

      # These are the resources your Lambda function needs access to
      # Logs, SSM Parameters, DynamoDb, S3, etc.
      # Define specific actions such as get/put (read/write)
      Policies:
      - PolicyName: LambdaResourceAccessPolicies
        PolicyDocument:
          Statement:

          - Sid: LambdaAccessToWriteLogs #This replaces the ManagedPolicyArns: !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource:
              Fn::GetAtt:
              - AppLogGroup
              - Arn

          - Sid: LambdaAccessToSSMParameters
            Action:
            - ssm:DescribeParameters
            - ssm:GetParameters
            - ssm:GetParameter
            - ssm:GetParametersByPath
            Effect: Allow
            Resource: 
              !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${ParameterStoreAppPath}*" # no / between :parameter and path or before *

          - Sid: LambdaAccessToS3BucketCache
            Action:
            - s3:PutObject
            - s3:GetObject
            - s3:GetObjectVersion
            Effect: Allow
            Resource:
              !Join 
                - ''
                - - Fn::GetAtt:
                    - AppDataS3Bucket
                    - Arn
                  - "/cache/*"

          - Sid: LambdaAccessToDynamoDBTable
            Action:
            - dynamodb:GetItem
            - dynamodb:Scan
            - dynamodb:Query
            - dynamodb:BatchGetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:BatchWriteItem
            Effect: Allow
            Resource:
              Fn::GetAtt:
              - AppDataDynamoDbTable
              - Arn

  # -- Lambda permissions allowing API Gateway to Execute --
  # See https://github.com/awslabs/serverless-application-model/issues/59#issuecomment-348709355
  ConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AppFunction
      Principal: apigateway.amazonaws.com

  # -- Lambda Function Error Alarm --
  AppFunctionErrorsAlarm:
    Type: "AWS::CloudWatch::Alarm"
    # Condition: IsProduction # TODO: Alarms cost money. Somehow decouple from deployment preference
    Properties:
      AlarmDescription: Lambda Function Error > 0
      MetricName: Errors
      Statistic: Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      Period: 900
      EvaluationPeriods: 1
      TreatMissingData: notBreaching
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Ref AppFunction
      AlarmActions:
        - Ref: AppFunctionErrorAlarmNotification

  # -- Lambda Function Notification for Error Alarm --
  AppFunctionErrorAlarmNotification:
      Type: AWS::SNS::Topic
      # Condition: IsProduction # TODO: Alarms cost money. Somehow decouple from deployment preference
      Properties: 
        DisplayName: !Sub 'AWS-Alarm-${Prefix}-${ProjectStageId}'
        FifoTopic: false
        Subscription:
          - Endpoint: !Ref AlarmNotificationEmail
            Protocol: 'email'

  # ---------------------------------------------------------------------------
  # Resources for Lambda Function

  # -- Log Group with a retention policy --
  AppLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
        LogGroupName: !Sub '/aws/lambda/${Prefix}-${ProjectStageId}-AppFunction' # Avoid circular reference !Sub "/aws/lambda/${AppFunction}"
        RetentionInDays: !If [ IsProduction, !Ref LogRetentionInDaysForPROD,  !Ref LogRetentionInDaysForDEVTEST]

  # -- DynamoDb for Lambda Cache Data Storage --
  AppDataDynamoDbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${Prefix}-${ProjectStageId}-CacheData'
      AttributeDefinitions: 
        - AttributeName: "id_hash"
          AttributeType: "S"
      KeySchema: 
        - AttributeName: "id_hash"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TimeToLiveSpecification:
        AttributeName: "purge_ts"
        Enabled: true # TODO: set to true if you want to enable TTL
      SSESpecification:
        SSEEnabled: true

  # -- DynamoDb Auto Scaling
  # See https://aws.amazon.com/blogs/database/how-to-use-aws-cloudformation-to-configure-auto-scaling-for-amazon-dynamodb-tables-and-indexes/
  UserTableWriteCapacityScalableTarget: 
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    DependsOn: AppDataDynamoDbTable
    Properties: 
      MaxCapacity: 100
      MinCapacity: 5
      ResourceId: !Sub table/${AppDataDynamoDbTable}
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable
      ScalableDimension: "dynamodb:table:WriteCapacityUnits"
      ServiceNamespace: dynamodb

  UserTableWriteScalingPolicy: 
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties: 
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref: UserTableWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration: 
        TargetValue: 80
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification: 
          PredefinedMetricType: DynamoDBWriteCapacityUtilization

  # -- S3 Bucket for Lambda App Data Storage --
  AppDataS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join # because this is not a public bucket, we'll give it a uniquely, specific name with region and acct
        - '-'
        - - !If [ IsCodeStar, 'aws-codestar', !Ref Prefix ] # S3 buckets for CodeStar for some reason use a dash (aws-codestar) so we can't just use the awscodestar prefix for CodeStar
          - !Ref AWS::Region
          - !Ref AWS::AccountId
          - !Ref ProjectStageId
          - 'appdata'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: "ExpireObjects"
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
            ExpirationInDays: !Ref PurgeAgeOfCachedBucketObjInDays
            Prefix: "cache" # this will limit this policy to YOURBUCKETNAME/cache/*
            NoncurrentVersionExpirationInDays: !Ref PurgeAgeOfCachedBucketObjInDays
            Status: "Enabled" # Enable only if you are going to use this LifecycleConfiguration

  # -- S3 Bucket Policy for Lambda App Data Storage --
  AppDataS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AppDataS3Bucket
      PolicyDocument:
        Statement:
              - Sid: "DenyNonSecureTransportAccess"
                Effect: Deny
                Principal: "*"
                Action: "s3:*"
                Resource:
                  - !GetAtt AppDataS3Bucket.Arn
                  - !Join [ '', [ !GetAtt AppDataS3Bucket.Arn, '/*' ] ]
                Condition:
                  Bool:
                    "aws:SecureTransport": false


  # ---------------------------------------------------------------------------
  # Monitoring

  # -- CloudWatch Dashboard --
  Dashboard:
    Type: AWS::CloudWatch::Dashboard
    Condition: CreateProdResources
    Properties:
      DashboardName: !Sub '${Prefix}-${ProjectStageId}-Dashboard'
      # - Three options, perform an include (which isn't working) or put it in as a sub
      # - Include doesn't work as it inserts as yaml. We need to insert the json object as a string
      # - OPTION 1: Include (doesn't work)
      # DashboardBody: 
      #   "Fn::Transform":
      #     Name: "AWS::Include"
      #     Parameters:
      #       Location: ./template-dashboard-body.json
      # - OPTION 2: Inline json with sub
      # DashboardBody: !Sub |
      #   {
      #       "widgets": [
      #       ]
      #   }
      # - OPTION 3: can we do an include this way? (untested)
      # DashboardBody: !Sub |
      #   "Fn::Transform":
      #     Name: "AWS::Include"
      #     Parameters:
      #       Location: ./template-dashboard-body.json
      # - OPTION 4:
      # DashboardBody: !Join
      #   - ""
      #   - - "Fn::Transform":
      #         Name: "AWS::Include"
      #         Parameters:
      #           Location: ./template-dashboard-body.json
      #     - ""

      DashboardBody: !Sub |
        {
            "widgets": [
                {
                    "type": "text",
                    "x": 0,
                    "y": 0,
                    "width": 24,
                    "height": 3,
                    "properties": {
                        "markdown": "# ${Prefix}-${ProjectStageId}-Dashboard"
                    }
                },
                {
                    "height": 6,
                    "width": 6,
                    "y": 3,
                    "x": 0,
                    "type": "metric",
                    "properties": {
                        "metrics": [
                            [ { "expression": "SEARCH('{AWS/Lambda,FunctionName}', 'Average', 3600)", "id": "e1", "visible": false, "region": "${AWS::Region}" } ],
                            [ "AWS/Lambda", "Invocations", "FunctionName", "${AppFunction}", { "id": "m2", "color": "#1f77b4" } ],
                            [ ".", "Errors", ".", ".", { "id": "m4", "color": "#d62728" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "title": "Invocations",
                        "period": 3600,
                        "stat": "Sum"
                    }
                },
                {
                    "height": 6,
                    "width": 6,
                    "y": 3,
                    "x": 6,
                    "type": "metric",
                    "properties": {
                        "metrics": [
                            [ { "expression": "SEARCH('{AWS/Lambda,FunctionName}', 'Average', 300)", "id": "e1", "period": 300, "visible": false, "region": "${AWS::Region}" } ],
                            [ "AWS/Lambda", "Duration", "FunctionName", "${AppFunction}", { "id": "m1" } ],
                            [ "...", { "id": "m2", "stat": "Maximum", "color": "#d62728" } ],
                            [ "...", { "id": "m3", "stat": "Minimum", "color": "#2ca02c" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "title": "Avg Duration",
                        "period": 3600,
                        "stat": "Average"
                    }
                },
                {
                    "height": 6,
                    "width": 6,
                    "y": 3,
                    "x": 12,
                    "type": "metric",
                    "properties": {
                        "view": "timeSeries",
                        "stacked": false,
                        "metrics": [
                            [ "AWS/Lambda", "ConcurrentExecutions", "FunctionName", "${AppFunction}" ]
                        ],
                        "region": "${AWS::Region}",
                        "title": "Concurrent Executions"
                    }
                },
                {
                    "height": 6,
                    "width": 6,
                    "y": 9,
                    "x": 0,
                    "type": "metric",
                    "properties": {
                        "metrics": [
                            [ "AWS/ApiGateway", "5XXError", "ApiName", "tmg6tb67l9", { "color": "#d62728" } ],
                            [ ".", "4XXError", ".", ".", { "color": "#9467bd" } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "stat": "Sum",
                        "period": 3600,
                        "title": "API Gateway Errors"
                    }
                },
                {
                    "height": 6,
                    "width": 6,
                    "y": 9,
                    "x": 6,
                    "type": "metric",
                    "properties": {
                        "metrics": [
                            [ { "expression": "SEARCH('{AWS/Lambda,FunctionName}', 'Average', 300)", "id": "e1", "period": 300, "visible": false, "region": "${AWS::Region}" } ],
                            [ "AWS/Lambda", "Errors", "FunctionName", "${AppFunction}", { "id": "m4", "visible": false, "stat": "Sum", "color": "#d62728", "period": 3600 } ]
                        ],
                        "view": "timeSeries",
                        "stacked": false,
                        "region": "${AWS::Region}",
                        "title": "Lambda Errors",
                        "period": 300,
                        "stat": "Average"
                    }
                },
                {
                  "type": "alarm",
                  "x": 12,
                  "y": 9,
                  "width": 6,
                  "height": 2,
                  "properties": {
                    "title": "Alarms",
                    "alarms": [
                      "arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${AppFunctionErrorsAlarm}"
                    ]
                  }
                },
                {
                    "height": 3,
                    "width": 24,
                    "y": 15,
                    "x": 0,
                    "type": "log",
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${AppFunction}' | filter @type = \"REPORT\"\n| stats max(@memorySize / 1024 / 1024) as provisonedMemoryMB,\n    min(@maxMemoryUsed / 1024 / 1024) as smallestMemoryRequestMB,\n    avg(@maxMemoryUsed / 1024 / 1024) as avgMemoryUsedMB,\n    max(@maxMemoryUsed / 1024 / 1024) as maxMemoryUsedMB,\n    provisonedMemoryMB - maxMemoryUsedMB as overProvisionedMB",
                        "region": "${AWS::Region}",
                        "title": "Memory",
                        "view": "table"
                    }
                },
                {
                    "height": 3,
                    "width": 24,
                    "y": 18,
                    "x": 0,
                    "type": "log",
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${AppFunction}' | filter @type=\"REPORT\"\n| fields (@duration<100) as R100,\n  (@duration>=100 and @duration<250) as R100_250,\n  (@duration>=250 and @duration<500) as R250_500,\n  (@duration>=500 and @duration<750) as R500_750,\n  (@duration>=750 and @duration<1000) as R750_1000,\n  (@duration>=1000 and @duration<=2000) as R1000_2000,\n  (@duration>=2000 and @duration<=3000) as R2000_3000,\n  (@duration>=3000 and @duration<=4000) as R3000_4000,\n  (@duration>=4000 and @duration<=5000) as R4000_5000,\n  (@duration>=5000 and @duration<=6000) as R5000_6000,\n  (@duration>=6000 and @duration<=7000) as R6000_7000,\n  (@duration>=7000 and @duration<=8000) as R7000_8000,\n  (@duration>=8000 and @duration<=9000) as R8000_9000,\n  (@duration>=9000 and @duration<=10000) as R9000_10000,\n  (@duration>10000) as R10000\n| stats min(@duration) as minDur,\n  avg(@duration) as avgDur,\n  max(@duration) as maxDur,\n  sum(R100) as D100ms,\n  sum(R100_250) as D100_250ms,\n  sum(R250_500) as D250_500ms,\n  sum(R500_750) as D500_750ms,\n  sum(R750_1000) as D750_1000ms,\n  sum(R1000_2000) as D1_2s,\n  sum(R2000_3000) as D2_3s,\n  sum(R3000_4000) as D3_4s,\n  sum(R4000_5000) as D4_5s,\n  sum(R5000_6000) as D5_6s,\n  sum(R6000_7000) as D6_7s,\n  sum(R7000_8000) as D7_8s,\n  sum(R8000_9000) as D8_9s,\n  sum(R9000_10000) as D9_10s,\n  sum(R10000) as D10s",
                        "region": "${AWS::Region}",
                        "title": "Durations",
                        "view": "table"
                    }
                },
                {
                    "height": 6,
                    "width": 24,
                    "y": 21,
                    "x": 0,
                    "type": "log",
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${AppFunction}' | fields @timestamp as ts, @message\n| sort ts desc\n| limit 500\n| PARSE @message \"[*] * | * | * | * | * | * | * | * | * | * | *\" as loggingType, uriID, statusCode, dataFrom, bodySize, execTime, endpoint, clientIP, userAgent, origin, referer, keyID\n| FILTER loggingType = \"RESPONSE\"\n| DISPLAY ts, uriID, statusCode, dataFrom, bodySize, execTime, endpoint, clientIP, userAgent, origin, referer, keyID",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "view": "table",
                        "title": "Response Log"
                    }
                },
                {
                    "height": 6,
                    "width": 24,
                    "y": 27,
                    "x": 0,
                    "type": "log",
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${AppFunction}' | fields @timestamp as ts, @requestId, @message, @logStream as logStream\n| sort ts desc\n| limit 500\n| PARSE @message \"[*] *\" as loggingType, loggingMessage\n| FILTER (loggingType = \"ERROR\" or loggingType = \"WARN\" or @message like \"Task timed out\")\n| DISPLAY ts, logStream, loggingType, loggingMessage",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "Error and Warning Log",
                        "view": "table"
                    }
                },
                {
                    "height": 3,
                    "width": 24,
                    "y": 33,
                    "x": 0,
                    "type": "text",
                    "properties": {
                        "markdown": "## Endpoint Cache\n\nCalls to external endpoints are cached internally.\n\nAdjust the cache policies to utilize the cache more or less often depending upon the update frequency of the data, the importance of changes being reflected in the cache, and to avoid external API limits."
                    }
                },
                {
                    "height": 6,
                    "width": 18,
                    "y": 36,
                    "x": 0,
                    "type": "log",
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${AppFunction}' | fields @timestamp as ts, @message\n| limit 500\n| PARSE @message \"[*] * | * | * | *\" as loggingType, id, endpoint, result, execTime\n| FILTER (loggingType = \"CACHE\")\n| stats count(*) as requests, min(execTime) as min_ms, ceil(avg(execTime)) as avg_ms, max(execTime) as max_ms by endpoint\n| sort requests desc\n",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "Endpoint Request Log",
                        "view": "table"
                    }
                },
                {
                    "height": 9,
                    "width": 21,
                    "y": 42,
                    "x": 0,
                    "type": "log",
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${AppFunction}' | fields @timestamp as ts, @message\n| limit 500\n| PARSE @message \"[*] * | * | * | *\" as loggingType, id, endpoint, result, execTime\n| FILTER (loggingType = \"CACHE\")\n| stats count(*) as requests, min(execTime) as min_ms, ceil(avg(execTime)) as avg_ms, max(execTime) as max_ms by endpoint, result\n| sort endpoint asc, result asc",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "Endpoint Cache Utilization",
                        "view": "table"
                    }
                },
                {
                    "height": 6,
                    "width": 12,
                    "y": 51,
                    "x": 0,
                    "type": "log",
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${AppFunction}' | fields @timestamp as ts, @message\n| limit 500\n| PARSE @message \"[*] * | * | * | *\" as loggingType, id, endpoint, result, execTime\n| FILTER (loggingType = \"CACHE\")\n| stats count(*) as requests, min(execTime) as min_ms, ceil(avg(execTime)) as avg_ms, max(execTime) as max_ms by result\n| sort requests desc\n",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "Cache Utilization",
                        "view": "table"
                    }
                },
                {
                    "height": 6,
                    "width": 12,
                    "y": 51,
                    "x": 12,
                    "type": "log",
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${AppFunction}' | fields @timestamp as ts, @message\n| limit 10\n| PARSE @message \"[*] * | * | * | *\" as loggingType, id, endpoint, result, execTime\n| FILTER (loggingType = \"CACHE\")\n| stats count(*) as requests by result\n| sort result asc\n",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "Cache Utilization Visual",
                        "view": "pie"
                    }
                },
                {
                    "height": 3,
                    "width": 24,
                    "y": 57,
                    "x": 0,
                    "type": "text",
                    "properties": {
                        "markdown": "## Cold Starts\n\n\nA cold start is when a Lambda function is loaded for execution. After execution, the Lambda function will reside in memory for up to 45 minutes waiting for additional executions.\n\n\nCold starts will occur for each new concurrent execution and after a Lambda function has been dormant for a period of time."
                    }
                },
                {
                    "height": 3,
                    "width": 24,
                    "y": 60,
                    "x": 0,
                    "type": "log",
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${AppFunction}' | filter @type=\"REPORT\"\n| fields @initDuration\n| stats min(@duration) as minDur,\n  avg(@initDuration) as avgDur,\n  max(@initDuration) as maxDur,\n  count(@initDuration) as num",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "Cold Starts",
                        "view": "table"
                    }
                },
                {
                    "height": 6,
                    "width": 18,
                    "y": 63,
                    "x": 0,
                    "type": "log",
                    "properties": {
                        "query": "SOURCE '/aws/lambda/${AppFunction}' | fields @timestamp as ts, @message, @logStream as logStream\n| sort ts desc\n| limit 100\n| PARSE @message \"[*] *\" as loggingType, ms\n| FILTER (loggingType = \"COLDSTART\")\n| DISPLAY ts, ms, logStream",
                        "region": "${AWS::Region}",
                        "stacked": false,
                        "title": "Init after Cold Start",
                        "view": "table"
                    }
                }
            ]
        }

# =============================================================================
# OUTPUTS
# -----------------------------------------------------------------------------
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/outputs-section-structure.html
#
# Place anything interesting that you would like to quickly refer to in 
# your cloudformation OUTPUT section. Test URLs, direct links to resources, etc
#

Outputs:
  APIEndpoint:
    Description: "Endpoint URL"
    Value: !Join
      - ""
      - - !Sub "https://${WebApi}.execute-api.${AWS::Region}.amazonaws.com/"
        - !If [ IsCodeStar, "Prod", !Ref ApiPathBase ] # CodeStar uses *.amazonaws.com/Prod but for ProjectStack you can use whatever you want by setting ApiPathBase
        - "/"
  APIEndpointTest:
    Description: "Endpoint Test URL"
    Value: !Join
      - ""
      - - !Sub "https://${WebApi}.execute-api.${AWS::Region}.amazonaws.com/"
        - !If [ IsCodeStar, "Prod", !Ref ApiPathBase ] # CodeStar uses *.amazonaws.com/Prod but for ProjectStack you can use whatever you want by setting ApiPathBase
        - "/?q=Chicago"
  LambdaWebConsole:
    Description: "Lambda Web Console"
    Value: !Sub "https://console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${AppFunction}?tab=code"
  DynamoDbWebConsole:
    Description: "DynamoDb Table Web Console"
    Value: !Sub "https://console.aws.amazon.com/dynamodbv2/home?region=${AWS::Region}#table?name=${AppDataDynamoDbTable}&initialTableGroup=%23all"
  S3BucketWebConsole:
    Description: "S3 Bucket Web Console"
    Value: !Sub "https://s3.console.aws.amazon.com/s3/buckets/${AppDataS3Bucket}?region=${AWS::Region}"
  SSMParameterStore:
    Description: "SSM Parameter Store Location"
    Value: !Ref ParameterStoreAppPath